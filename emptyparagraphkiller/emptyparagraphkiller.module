<?php
// $Id: emptyparagraphkiller.module,v 1.2 2010/12/09 15:46:15 siliconmeadow Exp $

/**
 * @file
 * Empty paragraph killer: because users are sometimes overzealous
 * with the return key.
 */

/**
 * Implementation of hook_filter().
 */
function emptyparagraphkiller_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return array(0 => t('Empty paragraph filter'), 1 => t('Preceding space destroyer'));

    case 'description':
      switch ($delta) {
        case 0:
          return t('When entering more than one carriage return, only the first will be honored.');
        case 1:
          return t('Removes the non-breaking space (<strong>&amp;nbsp;</strong>) which often appears at the beginning of sentences.');
      }

    case 'no cache':
      // This case can be removed for most filters, but returning TRUE is useful for development.
      return FALSE;

    case 'prepare':
      return $text;

    case 'process':
      switch ($delta) {
        case 0:
          // Empty paragraph killer filter
          $text = preg_replace('#<p[^>]*>(\s|&nbsp;?)*</p>#', '', $text);
          return $text;
        case 1:
          // Removes &npsp; at the beginning of paragraphs
          $text = preg_replace('#<p[^>]*>(\s|&nbsp;?)#', '<p>', $text);
          return $text;
      }
    case 'settings':
      // OPTIONAL: Add additional settings for filter. At this stage, it would appear that we don't
      // yet need this.
      return;
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function emptyparagraphkiller_filter_tips($delta, $format, $long = FALSE) {
  // OPTIONAL: If more than one filter was defined in hook_filter, perform switch on $delta
  switch ($delta) {
    case 0:
      // Empty paragraph killer filter tip
      switch ($long) {
          case FALSE:
            return t('Empty paragraph killer - multiple returns will not break the site\'s style.');
          case TRUE:
            return '<p>' . t('Your typing habits may include hitting the return key twice when completing a paragraph. This site will accomodate your habit, and ensure the content is in keeping with the the stylistic formatting of the site\'s theme.') . '</p>';
      }
    case 1:
      // Non-breaking space remover from beginning of paragraphs
      switch ($long) {
          case FALSE:
            return t('Preceding space destroyer - removes the single space often added by WYSIWYG editors.');
          case TRUE:
            return '<p>' . t('WYSIWYG editors often add a space at the beginning of newly created paragraphs. The first
            such space at the beginning of a paragraph will be removed.') . '</p>';
      }
  }
}

